# Recipe
type RecipeInstruction {
  id: ID
  description: String
  recipeId: ID
  duration: Int
  foodItems: [Food]
}

type Recipe {
  id: String
  name: String
  preparationDuration: Int
  cookingDuration: Int
  recipeInstructions: [RecipeInstruction]
}

input RecipeInput {
  name: String
  preparationDuration: Int
  cookingDuration: Int
}

type RecipeOutput {
  recipe: Recipe
}

type RecipesOutput {
  recipes: [Recipe]
}

type RecipeEvent {
  id: ID
  recipeId: ID
  eventId: ID
  finishedAt: DateTime
}

type RecipeEventOutput {
  recipeEvent: RecipeEvent
}

type Query {
  nextRecipe(userId: ID!): RecipeOutput
  recipe(id: ID!): RecipeOutput
  recipes: RecipesOutput
  foodRecipes(foodId: ID!): RecipesOutput
}

type Mutation {
  newRecipe(recipeInput: RecipeInput): RecipeOutput
  replaceRecipe(recipeEventId: ID!): RecipeEventOutput
}

# User
enum UserPreferenceType {
  MAX_RECIPES_PER_WEEK
  SHOPPING_WEEKS_INTERVAL
}

type UserPreference {
  id: String
  userId: String
  type: UserPreferenceType
  value: Int
}

input UserPreferenceInput{
  id: String
  userId: String
  type: UserPreferenceType
  value: Int
}


type UserPreferencesOutput {
  userPreferences: [UserPreference]
}

type Query {
userPreferences(userId: ID): UserPreferencesOutput
}

type Mutation {
  updateUserPreferences(userPreferencesInput: [UserPreferenceInput]): UserPreferencesOutput
}


# Food
type Food {
  id: String
  name: String
  type: FoodType
}

enum FoodType {
  CEREALS_AND_DERIVED
  FRUIT
  INGREDIENT
  VEGETABLE
  LEGUME
  FATS
  OILS
  NUTS_AND_SEEDS
  FISH
  POTATOES
  AGRICULTURAL_PRODUCTS
  DAIRY_PRODUCTS
  SAUCES
  DRESSING
  SODAS
  DRINKS
  JUICES
  MEATS
}

type Query {
  foodItems: FoodItemsOutput
}

type FoodItemsOutput {
  foodItems: [Food!]!
}

type Mutation {
  deleteFoodItem(id: String!): FoodOutput
}

type FoodOutput {
  food: Food
}
