# Recipe
type RecipeInstruction {
  id: ID!
  description: String!
  recipeId: ID
  duration: Int
  foodItems: [Food]
}

type Recipe {
  id: String!
  name: String!
  preparationDuration: Int!
  cookingDuration: Int!
  image: String
  numberOfPeople: Int
  recipeInstructions: [RecipeInstruction]
  recipeFoodItems: [RecipeFood]
}

input RecipeInput {
  name: String
  preparationDuration: Int
  cookingDuration: Int
}

input RecipeFiltersInput {
  searchQuery: String
}

type RecipeOutput {
  recipe: Recipe
}

type RecipesOutput {
  recipes: [Recipe]
  total: Int
}

type RecipeFood {
  id: ID
  recipeId: ID
  foodId: ID
  quantity: Float
  quantityUnit: String
  food: Food
  recipe: Recipe
}

type RecipeEvent {
  id: ID
  recipeId: ID
  eventId: ID
  finishedAt: DateTime
}

type RecipeEventOutput {
  recipeEvent: RecipeEvent
}

type Query {
  nextRecipe(userId: ID!): RecipeOutput
  recipe(id: ID!): RecipeOutput
  recipes(filters: RecipeFiltersInput, pagination: Pagination): RecipesOutput
  foodRecipes(foodId: ID!): RecipesOutput
}

type Mutation {
  newRecipe(recipeInput: RecipeInput): RecipeOutput
  replaceRecipe(recipeId: ID!, eventId: ID!): RecipeEventOutput
}